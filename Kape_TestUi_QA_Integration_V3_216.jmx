<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">QA Integration and QA multi- plan</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Kape QA Integration Config-Local" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="API-URL" elementType="Argument">
            <stringProp name="Argument.name">API-URL</stringProp>
            <stringProp name="Argument.value">qa-api.atom.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">api url</stringProp>
          </elementProp>
          <elementProp name="PERF-URL" elementType="Argument">
            <stringProp name="Argument.name">PERF-URL</stringProp>
            <stringProp name="Argument.value">integration-atom.qa.ktp.io</stringProp>
            <stringProp name="Argument.desc">Performance Atom</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="JASPER-URL" elementType="Argument">
            <stringProp name="Argument.name">JASPER-URL</stringProp>
            <stringProp name="Argument.value">perf-jasperservices.kaptest.com</stringProp>
            <stringProp name="Argument.desc">Jasper</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RETAIL-URL" elementType="Argument">
            <stringProp name="Argument.name">RETAIL-URL</stringProp>
            <stringProp name="Argument.value">atom-web-prod-ktp-retail.kaptest.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Atom Retail</stringProp>
          </elementProp>
          <elementProp name="ConnTimeOut" elementType="Argument">
            <stringProp name="Argument.name">ConnTimeOut</stringProp>
            <stringProp name="Argument.value">120000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Connection Timeout</stringProp>
          </elementProp>
          <elementProp name="RespTimeOut" elementType="Argument">
            <stringProp name="Argument.name">RespTimeOut</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Response Timeout</stringProp>
          </elementProp>
          <elementProp name="ShortWait" elementType="Argument">
            <stringProp name="Argument.name">ShortWait</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Short Think Time</stringProp>
          </elementProp>
          <elementProp name="AnswerWait" elementType="Argument">
            <stringProp name="Argument.name">AnswerWait</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Answer Questions Think Time</stringProp>
          </elementProp>
          <elementProp name="LongWait" elementType="Argument">
            <stringProp name="Argument.name">LongWait</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Long Think Time</stringProp>
          </elementProp>
          <elementProp name="ProductCode" elementType="Argument">
            <stringProp name="Argument.name">ProductCode</stringProp>
            <stringProp name="Argument.value">QATESTOD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">MCATQB</stringProp>
          </elementProp>
          <elementProp name="Username" elementType="Argument">
            <stringProp name="Argument.name">Username</stringProp>
            <stringProp name="Argument.value">svc_applause_qa</stringProp>
            <stringProp name="Argument.desc">Username for Performance Atom</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">uKjRc%sv168</stringProp>
            <stringProp name="Argument.desc">Password for Performance Atom</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EnrollmentId-Temp" elementType="Argument">
            <stringProp name="Argument.name">EnrollmentId-Temp</stringProp>
            <stringProp name="Argument.value">PerfTest001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token_File" elementType="Argument">
            <stringProp name="Argument.name">Token_File</stringProp>
            <stringProp name="Argument.value">QA-INT-NEW-RDS-32500-user-124.csv</stringProp>
            <stringProp name="Argument.desc">Kape-jwt-token.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token_Temp" elementType="Argument">
            <stringProp name="Argument.name">Token_Temp</stringProp>
            <stringProp name="Argument.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBJZCI6ImF0b20ud2ViIiwidXNlciI6eyJpZCI6IlBlcmZUZXN0MDAxIiwicHJvdmlkZXIiOiJnb29nbGUiLCJlbWFpbCI6ImphbWVzLmtpbUBrYXBsYW4uY29tIiwiZmlyc3ROYW1lIjoiSmFtZXMiLCJsYXN0TmFtZSI6IktpbSJ9LCJyZXNvdXJjZXMiOlt7InVybiI6Ik1DQVRRQiIsImlzQWN0aXZlIjp0cnVlfSx7InVybiI6IlBlcmZUZXN0MDAxIiwiaXNBY3RpdmUiOnRydWV9XSwiaWF0IjoxNTAzOTM5NzUyLCJleHAiOjE1MDQwNjkzNTIsImlzcyI6ImdhdGV3YXkifQ.8fJqQWFuy8mfSG7hnxEBdS17ZV-rJEF1frzOaShEknw</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestCount" elementType="Argument">
            <stringProp name="Argument.name">TestCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Api_Base_String" elementType="Argument">
            <stringProp name="Argument.name">Var_Api_Base_String</stringProp>
            <stringProp name="Argument.value">/api/v1/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Port_No" elementType="Argument">
            <stringProp name="Argument.name">Var_Port_No</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Protocol" elementType="Argument">
            <stringProp name="Argument.name">Var_Protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Server_Name" elementType="Argument">
            <stringProp name="Argument.name">Var_Server_Name</stringProp>
            <stringProp name="Argument.value">harmony.qa.ktp.io</stringProp>
            <stringProp name="Argument.desc">QA: harmony.qa.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="STUDENTPERF-URL" elementType="Argument">
            <stringProp name="Argument.name">STUDENTPERF-URL</stringProp>
            <stringProp name="Argument.value">studentperformance-integration.qa.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Title" elementType="Argument">
            <stringProp name="Argument.name">Title</stringProp>
            <stringProp name="Argument.value">Kape-1204-QA-INT-300VU-</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="item_pool_id" elementType="Argument">
            <stringProp name="Argument.name">item_pool_id</stringProp>
            <stringProp name="Argument.value">sn_4d45f</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="harmony_path" elementType="Argument">
            <stringProp name="Argument.name">harmony_path</stringProp>
            <stringProp name="Argument.value">/h/harmony-integration/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="content_path" elementType="Argument">
            <stringProp name="Argument.name">content_path</stringProp>
            <stringProp name="Argument.value">/h/content-integration/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="student_perf_path" elementType="Argument">
            <stringProp name="Argument.name">student_perf_path</stringProp>
            <stringProp name="Argument.value">/h/studentperformance-integration/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VideoWait" elementType="Argument">
            <stringProp name="Argument.name">VideoWait</stringProp>
            <stringProp name="Argument.value">3500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Kape QA Integration Config-Server" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="API-URL" elementType="Argument">
            <stringProp name="Argument.name">API-URL</stringProp>
            <stringProp name="Argument.value">qa-api.atom.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">api url</stringProp>
          </elementProp>
          <elementProp name="PERF-URL" elementType="Argument">
            <stringProp name="Argument.name">PERF-URL</stringProp>
            <stringProp name="Argument.value">integration-atom.qa.ktp.io</stringProp>
            <stringProp name="Argument.desc">Performance Atom</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="JASPER-URL" elementType="Argument">
            <stringProp name="Argument.name">JASPER-URL</stringProp>
            <stringProp name="Argument.value">perf-jasperservices.kaptest.com</stringProp>
            <stringProp name="Argument.desc">Jasper</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RETAIL-URL" elementType="Argument">
            <stringProp name="Argument.name">RETAIL-URL</stringProp>
            <stringProp name="Argument.value">atom-web-prod-ktp-retail.kaptest.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Atom Retail</stringProp>
          </elementProp>
          <elementProp name="SEC-BRIGHTCOVE" elementType="Argument">
            <stringProp name="Argument.name">SEC-BRIGHTCOVE</stringProp>
            <stringProp name="Argument.value">secure.brightcove.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Security Brightcove</stringProp>
          </elementProp>
          <elementProp name="HLS-BRIGHTCOVE" elementType="Argument">
            <stringProp name="Argument.name">HLS-BRIGHTCOVE</stringProp>
            <stringProp name="Argument.value">brightcove.hs.llnwd.net</stringProp>
            <stringProp name="Argument.desc">HLS Brightcove</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ConnTimeOut" elementType="Argument">
            <stringProp name="Argument.name">ConnTimeOut</stringProp>
            <stringProp name="Argument.value">120000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Connection Timeout</stringProp>
          </elementProp>
          <elementProp name="RespTimeOut" elementType="Argument">
            <stringProp name="Argument.name">RespTimeOut</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Response Timeout</stringProp>
          </elementProp>
          <elementProp name="ShortWait" elementType="Argument">
            <stringProp name="Argument.name">ShortWait</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Short Think Time</stringProp>
          </elementProp>
          <elementProp name="AnswerWait" elementType="Argument">
            <stringProp name="Argument.name">AnswerWait</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Answer Questions Think Time</stringProp>
          </elementProp>
          <elementProp name="LongWait" elementType="Argument">
            <stringProp name="Argument.name">LongWait</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Long Think Time</stringProp>
          </elementProp>
          <elementProp name="Exclusion" elementType="Argument">
            <stringProp name="Argument.name">Exclusion</stringProp>
            <stringProp name="Argument.value">^((?!google|facebook|pinterest|twimg|doubleclick|youtube|optimizely|formstack|media).)*$</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">URL Embedded resources exclusion</stringProp>
          </elementProp>
          <elementProp name="ProductCodes" elementType="Argument">
            <stringProp name="Argument.name">ProductCodes</stringProp>
            <stringProp name="Argument.value">MCATOLX,GMATPREOL,GREN,LSATPN,KACTOLB,PSATOL,SATPOP16</stringProp>
            <stringProp name="Argument.desc">Product Codes - Order</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductCodes_W" elementType="Argument">
            <stringProp name="Argument.name">ProductCodes_W</stringProp>
            <stringProp name="Argument.value">50,10,10,10,7,6,7</stringProp>
            <stringProp name="Argument.desc">Product Codes - Weigth</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Username" elementType="Argument">
            <stringProp name="Argument.name">Username</stringProp>
            <stringProp name="Argument.value">svc_applause_qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Username for Performance Atom</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">uKjRc%sv168</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Password for Performance Atom</stringProp>
          </elementProp>
          <elementProp name="Testname" elementType="Argument">
            <stringProp name="Argument.name">Testname</stringProp>
            <stringProp name="Argument.value">Test${__RandomString(6,0123456789,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">TestName for Qbank</stringProp>
          </elementProp>
          <elementProp name="MCAT_Ratio" elementType="Argument">
            <stringProp name="Argument.name">MCAT_Ratio</stringProp>
            <stringProp name="Argument.value">5,40,55</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OTHERS_Ratio" elementType="Argument">
            <stringProp name="Argument.name">OTHERS_Ratio</stringProp>
            <stringProp name="Argument.value">5,25,70</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Ratio" elementType="Argument">
            <stringProp name="Argument.name">Ratio</stringProp>
            <stringProp name="Argument.value">pdf,video,tests(testq,readq,webgrid,full,qbank)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Ratio by elements</stringProp>
          </elementProp>
          <elementProp name="ProductCode" elementType="Argument">
            <stringProp name="Argument.name">ProductCode</stringProp>
            <stringProp name="Argument.value">QATESTOD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EnrollmentId-temp" elementType="Argument">
            <stringProp name="Argument.name">EnrollmentId-temp</stringProp>
            <stringProp name="Argument.value">PerfTest001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token_File" elementType="Argument">
            <stringProp name="Argument.name">Token_File</stringProp>
            <stringProp name="Argument.value">/home/jamesk/PerfTest/Kape/QA-INT-NEW-RDS-ONE-34100-user-1211.csv</stringProp>
            <stringProp name="Argument.desc">bearer token list</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token_Temp" elementType="Argument">
            <stringProp name="Argument.name">Token_Temp</stringProp>
            <stringProp name="Argument.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBJZCI6ImF0b20ud2ViIiwidXNlciI6eyJpZCI6IlBlcmZUZXN0MDAxIiwicHJvdmlkZXIiOiJnb29nbGUiLCJlbWFpbCI6ImphbWVzLmtpbUBrYXBsYW4uY29tIiwiZmlyc3ROYW1lIjoiSmFtZXMiLCJsYXN0TmFtZSI6IktpbSJ9LCJyZXNvdXJjZXMiOlt7InVybiI6Ik1DQVRRQiIsImlzQWN0aXZlIjp0cnVlfSx7InVybiI6IlBlcmZUZXN0MDAxIiwiaXNBY3RpdmUiOnRydWV9XSwiaWF0IjoxNTAzOTM5NzUyLCJleHAiOjE1MDQwNjkzNTIsImlzcyI6ImdhdGV3YXkifQ.8fJqQWFuy8mfSG7hnxEBdS17ZV-rJEF1frzOaShEknw</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestCount" elementType="Argument">
            <stringProp name="Argument.name">TestCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Api_Base_String" elementType="Argument">
            <stringProp name="Argument.name">Var_Api_Base_String</stringProp>
            <stringProp name="Argument.value">/api/v1/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Port_No" elementType="Argument">
            <stringProp name="Argument.name">Var_Port_No</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Protocol" elementType="Argument">
            <stringProp name="Argument.name">Var_Protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Server_Name" elementType="Argument">
            <stringProp name="Argument.name">Var_Server_Name</stringProp>
            <stringProp name="Argument.value">harmony.qa.ktp.io</stringProp>
            <stringProp name="Argument.desc">QA: harmony.qa.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="STUDENTPERF-URL" elementType="Argument">
            <stringProp name="Argument.name">STUDENTPERF-URL</stringProp>
            <stringProp name="Argument.value">studentperformance.qa.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Title" elementType="Argument">
            <stringProp name="Argument.name">Title</stringProp>
            <stringProp name="Argument.value">Kape-1204-QA-INT-300VU-</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="item_pool_id" elementType="Argument">
            <stringProp name="Argument.name">item_pool_id</stringProp>
            <stringProp name="Argument.value">sn_4d45f</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="harmony_path" elementType="Argument">
            <stringProp name="Argument.name">harmony_path</stringProp>
            <stringProp name="Argument.value">/h/harmony-integration/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="content_path" elementType="Argument">
            <stringProp name="Argument.name">content_path</stringProp>
            <stringProp name="Argument.value">/h/content-integration/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="student_perf_path" elementType="Argument">
            <stringProp name="Argument.name">student_perf_path</stringProp>
            <stringProp name="Argument.value">/h/studentperformance-integration/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VideoWait" elementType="Argument">
            <stringProp name="Argument.name">VideoWait</stringProp>
            <stringProp name="Argument.value">3500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Kape QA Config-Local" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="API-URL" elementType="Argument">
            <stringProp name="Argument.name">API-URL</stringProp>
            <stringProp name="Argument.value">qa-api.atom.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">api url</stringProp>
          </elementProp>
          <elementProp name="PERF-URL" elementType="Argument">
            <stringProp name="Argument.name">PERF-URL</stringProp>
            <stringProp name="Argument.value">atom.qa.ktp.io</stringProp>
            <stringProp name="Argument.desc">Performance Atom</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="JASPER-URL" elementType="Argument">
            <stringProp name="Argument.name">JASPER-URL</stringProp>
            <stringProp name="Argument.value">perf-jasperservices.kaptest.com</stringProp>
            <stringProp name="Argument.desc">Jasper</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RETAIL-URL" elementType="Argument">
            <stringProp name="Argument.name">RETAIL-URL</stringProp>
            <stringProp name="Argument.value">atom-web-prod-ktp-retail.kaptest.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Atom Retail</stringProp>
          </elementProp>
          <elementProp name="SEC-BRIGHTCOVE" elementType="Argument">
            <stringProp name="Argument.name">SEC-BRIGHTCOVE</stringProp>
            <stringProp name="Argument.value">secure.brightcove.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Security Brightcove</stringProp>
          </elementProp>
          <elementProp name="HLS-BRIGHTCOVE" elementType="Argument">
            <stringProp name="Argument.name">HLS-BRIGHTCOVE</stringProp>
            <stringProp name="Argument.value">brightcove.hs.llnwd.net</stringProp>
            <stringProp name="Argument.desc">HLS Brightcove</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ConnTimeOut" elementType="Argument">
            <stringProp name="Argument.name">ConnTimeOut</stringProp>
            <stringProp name="Argument.value">120000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Connection Timeout</stringProp>
          </elementProp>
          <elementProp name="RespTimeOut" elementType="Argument">
            <stringProp name="Argument.name">RespTimeOut</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Response Timeout</stringProp>
          </elementProp>
          <elementProp name="ShortWait" elementType="Argument">
            <stringProp name="Argument.name">ShortWait</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Short Think Time</stringProp>
          </elementProp>
          <elementProp name="AnswerWait" elementType="Argument">
            <stringProp name="Argument.name">AnswerWait</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Answer Questions Think Time</stringProp>
          </elementProp>
          <elementProp name="LongWait" elementType="Argument">
            <stringProp name="Argument.name">LongWait</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Long Think Time</stringProp>
          </elementProp>
          <elementProp name="ProductCode" elementType="Argument">
            <stringProp name="Argument.name">ProductCode</stringProp>
            <stringProp name="Argument.value">QATESTOD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">MCATQB</stringProp>
          </elementProp>
          <elementProp name="EnrollmentId-Temp" elementType="Argument">
            <stringProp name="Argument.name">EnrollmentId-Temp</stringProp>
            <stringProp name="Argument.value">PerfTest001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token_File" elementType="Argument">
            <stringProp name="Argument.name">Token_File</stringProp>
            <stringProp name="Argument.value">QA-INT-jwt-token-100user1108-216.csv</stringProp>
            <stringProp name="Argument.desc">Kape-jwt-token.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token_Temp" elementType="Argument">
            <stringProp name="Argument.name">Token_Temp</stringProp>
            <stringProp name="Argument.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBJZCI6ImF0b20ud2ViIiwidXNlciI6eyJpZCI6IlBlcmZUZXN0MDAxIiwicHJvdmlkZXIiOiJnb29nbGUiLCJlbWFpbCI6ImphbWVzLmtpbUBrYXBsYW4uY29tIiwiZmlyc3ROYW1lIjoiSmFtZXMiLCJsYXN0TmFtZSI6IktpbSJ9LCJyZXNvdXJjZXMiOlt7InVybiI6Ik1DQVRRQiIsImlzQWN0aXZlIjp0cnVlfSx7InVybiI6IlBlcmZUZXN0MDAxIiwiaXNBY3RpdmUiOnRydWV9XSwiaWF0IjoxNTAzOTM5NzUyLCJleHAiOjE1MDQwNjkzNTIsImlzcyI6ImdhdGV3YXkifQ.8fJqQWFuy8mfSG7hnxEBdS17ZV-rJEF1frzOaShEknw</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestCount" elementType="Argument">
            <stringProp name="Argument.name">TestCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Api_Base_String" elementType="Argument">
            <stringProp name="Argument.name">Var_Api_Base_String</stringProp>
            <stringProp name="Argument.value">/api/v1/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Port_No" elementType="Argument">
            <stringProp name="Argument.name">Var_Port_No</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Protocol" elementType="Argument">
            <stringProp name="Argument.name">Var_Protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Server_Name" elementType="Argument">
            <stringProp name="Argument.name">Var_Server_Name</stringProp>
            <stringProp name="Argument.value">harmony.qa.ktp.io</stringProp>
            <stringProp name="Argument.desc">QA: harmony.qa.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="STUDENTPERF-URL" elementType="Argument">
            <stringProp name="Argument.name">STUDENTPERF-URL</stringProp>
            <stringProp name="Argument.value">studentperformance.qa.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Title" elementType="Argument">
            <stringProp name="Argument.name">Title</stringProp>
            <stringProp name="Argument.value">Kape-Local-1115-smoke</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="item_pool_id" elementType="Argument">
            <stringProp name="Argument.name">item_pool_id</stringProp>
            <stringProp name="Argument.value">sn_4d45f</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="harmony_path" elementType="Argument">
            <stringProp name="Argument.name">harmony_path</stringProp>
            <stringProp name="Argument.value">/h/harmony/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="student_perf_path" elementType="Argument">
            <stringProp name="Argument.name">student_perf_path</stringProp>
            <stringProp name="Argument.value">/h/studentperformance/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="content_path" elementType="Argument">
            <stringProp name="Argument.name">content_path</stringProp>
            <stringProp name="Argument.value">/h/content/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Username" elementType="Argument">
            <stringProp name="Argument.name">Username</stringProp>
            <stringProp name="Argument.value">svc_applause_qa</stringProp>
            <stringProp name="Argument.desc">Username for Performance Atom</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">uKjRc%sv168</stringProp>
            <stringProp name="Argument.desc">Password for Performance Atom</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">10/30 Kape-jwt-token-30user-259.csv for the QA test</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Kape QA Config-Server" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="API-URL" elementType="Argument">
            <stringProp name="Argument.name">API-URL</stringProp>
            <stringProp name="Argument.value">qa-api.atom.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">api url</stringProp>
          </elementProp>
          <elementProp name="PERF-URL" elementType="Argument">
            <stringProp name="Argument.name">PERF-URL</stringProp>
            <stringProp name="Argument.value">atom.qa.ktp.io</stringProp>
            <stringProp name="Argument.desc">Performance Atom</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="JASPER-URL" elementType="Argument">
            <stringProp name="Argument.name">JASPER-URL</stringProp>
            <stringProp name="Argument.value">perf-jasperservices.kaptest.com</stringProp>
            <stringProp name="Argument.desc">Jasper</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RETAIL-URL" elementType="Argument">
            <stringProp name="Argument.name">RETAIL-URL</stringProp>
            <stringProp name="Argument.value">atom-web-prod-ktp-retail.kaptest.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Atom Retail</stringProp>
          </elementProp>
          <elementProp name="SEC-BRIGHTCOVE" elementType="Argument">
            <stringProp name="Argument.name">SEC-BRIGHTCOVE</stringProp>
            <stringProp name="Argument.value">secure.brightcove.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Security Brightcove</stringProp>
          </elementProp>
          <elementProp name="HLS-BRIGHTCOVE" elementType="Argument">
            <stringProp name="Argument.name">HLS-BRIGHTCOVE</stringProp>
            <stringProp name="Argument.value">brightcove.hs.llnwd.net</stringProp>
            <stringProp name="Argument.desc">HLS Brightcove</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ConnTimeOut" elementType="Argument">
            <stringProp name="Argument.name">ConnTimeOut</stringProp>
            <stringProp name="Argument.value">120000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Connection Timeout</stringProp>
          </elementProp>
          <elementProp name="RespTimeOut" elementType="Argument">
            <stringProp name="Argument.name">RespTimeOut</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Response Timeout</stringProp>
          </elementProp>
          <elementProp name="ShortWait" elementType="Argument">
            <stringProp name="Argument.name">ShortWait</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Short Think Time</stringProp>
          </elementProp>
          <elementProp name="AnswerWait" elementType="Argument">
            <stringProp name="Argument.name">AnswerWait</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Answer Questions Think Time</stringProp>
          </elementProp>
          <elementProp name="LongWait" elementType="Argument">
            <stringProp name="Argument.name">LongWait</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Long Think Time</stringProp>
          </elementProp>
          <elementProp name="Exclusion" elementType="Argument">
            <stringProp name="Argument.name">Exclusion</stringProp>
            <stringProp name="Argument.value">^((?!google|facebook|pinterest|twimg|doubleclick|youtube|optimizely|formstack|media).)*$</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">URL Embedded resources exclusion</stringProp>
          </elementProp>
          <elementProp name="ProductCodes" elementType="Argument">
            <stringProp name="Argument.name">ProductCodes</stringProp>
            <stringProp name="Argument.value">MCATOLX,GMATPREOL,GREN,LSATPN,KACTOLB,PSATOL,SATPOP16</stringProp>
            <stringProp name="Argument.desc">Product Codes - Order</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductCodes_W" elementType="Argument">
            <stringProp name="Argument.name">ProductCodes_W</stringProp>
            <stringProp name="Argument.value">50,10,10,10,7,6,7</stringProp>
            <stringProp name="Argument.desc">Product Codes - Weigth</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Username" elementType="Argument">
            <stringProp name="Argument.name">Username</stringProp>
            <stringProp name="Argument.value">svc_applause_qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Username for Performance Atom</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">uKjRc%sv168</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Password for Performance Atom</stringProp>
          </elementProp>
          <elementProp name="Testname" elementType="Argument">
            <stringProp name="Argument.name">Testname</stringProp>
            <stringProp name="Argument.value">Test${__RandomString(6,0123456789,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">TestName for Qbank</stringProp>
          </elementProp>
          <elementProp name="MCAT_Ratio" elementType="Argument">
            <stringProp name="Argument.name">MCAT_Ratio</stringProp>
            <stringProp name="Argument.value">5,40,55</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OTHERS_Ratio" elementType="Argument">
            <stringProp name="Argument.name">OTHERS_Ratio</stringProp>
            <stringProp name="Argument.value">5,25,70</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Ratio" elementType="Argument">
            <stringProp name="Argument.name">Ratio</stringProp>
            <stringProp name="Argument.value">pdf,video,tests(testq,readq,webgrid,full,qbank)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Ratio by elements</stringProp>
          </elementProp>
          <elementProp name="ProductCode" elementType="Argument">
            <stringProp name="Argument.name">ProductCode</stringProp>
            <stringProp name="Argument.value">QATESTOD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EnrollmentId-temp" elementType="Argument">
            <stringProp name="Argument.name">EnrollmentId-temp</stringProp>
            <stringProp name="Argument.value">PerfTest001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token_File" elementType="Argument">
            <stringProp name="Argument.name">Token_File</stringProp>
            <stringProp name="Argument.value">/home/jamesk/jmeter32/bin/Kaplan/QA-INT-jwt-token-500user118-88.csv</stringProp>
            <stringProp name="Argument.desc">bearer token list</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token_Temp" elementType="Argument">
            <stringProp name="Argument.name">Token_Temp</stringProp>
            <stringProp name="Argument.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBJZCI6ImF0b20ud2ViIiwidXNlciI6eyJpZCI6IlBlcmZUZXN0MDAxIiwicHJvdmlkZXIiOiJnb29nbGUiLCJlbWFpbCI6ImphbWVzLmtpbUBrYXBsYW4uY29tIiwiZmlyc3ROYW1lIjoiSmFtZXMiLCJsYXN0TmFtZSI6IktpbSJ9LCJyZXNvdXJjZXMiOlt7InVybiI6Ik1DQVRRQiIsImlzQWN0aXZlIjp0cnVlfSx7InVybiI6IlBlcmZUZXN0MDAxIiwiaXNBY3RpdmUiOnRydWV9XSwiaWF0IjoxNTAzOTM5NzUyLCJleHAiOjE1MDQwNjkzNTIsImlzcyI6ImdhdGV3YXkifQ.8fJqQWFuy8mfSG7hnxEBdS17ZV-rJEF1frzOaShEknw</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestCount" elementType="Argument">
            <stringProp name="Argument.name">TestCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Api_Base_String" elementType="Argument">
            <stringProp name="Argument.name">Var_Api_Base_String</stringProp>
            <stringProp name="Argument.value">/api/v1/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Port_No" elementType="Argument">
            <stringProp name="Argument.name">Var_Port_No</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Protocol" elementType="Argument">
            <stringProp name="Argument.name">Var_Protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Var_Server_Name" elementType="Argument">
            <stringProp name="Argument.name">Var_Server_Name</stringProp>
            <stringProp name="Argument.value">harmony.qa.ktp.io</stringProp>
            <stringProp name="Argument.desc">QA: harmony.qa.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="STUDENTPERF-URL" elementType="Argument">
            <stringProp name="Argument.name">STUDENTPERF-URL</stringProp>
            <stringProp name="Argument.value">studentperformance.qa.ktp.io</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Title" elementType="Argument">
            <stringProp name="Argument.name">Title</stringProp>
            <stringProp name="Argument.value">Kape-Server-1115-200Threshold</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="item_pool_id" elementType="Argument">
            <stringProp name="Argument.name">item_pool_id</stringProp>
            <stringProp name="Argument.value">sn_4d45f</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="harmony_path" elementType="Argument">
            <stringProp name="Argument.name">harmony_path</stringProp>
            <stringProp name="Argument.value">/h/harmony/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="content_path" elementType="Argument">
            <stringProp name="Argument.name">content_path</stringProp>
            <stringProp name="Argument.value">/h/content/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="student_perf_path" elementType="Argument">
            <stringProp name="Argument.name">student_perf_path</stringProp>
            <stringProp name="Argument.value">/h/studentperformance/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">10/30 Kape-jwt-token-30user-259.csv for the QA tes</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Cookie Config" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="C_ENV" elementType="Argument">
            <stringProp name="Argument.name">C_ENV</stringProp>
            <stringProp name="Argument.value">atom.web.environment</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Cookie name base environment</stringProp>
          </elementProp>
          <elementProp name="C_AAMC" elementType="Argument">
            <stringProp name="Argument.name">C_AAMC</stringProp>
            <stringProp name="Argument.value">qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="C_CHANNEL" elementType="Argument">
            <stringProp name="Argument.name">C_CHANNEL</stringProp>
            <stringProp name="Argument.value">qa</stringProp>
            <stringProp name="Argument.desc">qa, staging, production</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="C_FORMSTACK" elementType="Argument">
            <stringProp name="Argument.name">C_FORMSTACK</stringProp>
            <stringProp name="Argument.value">qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qa, staging, production</stringProp>
          </elementProp>
          <elementProp name="C_JASPER" elementType="Argument">
            <stringProp name="Argument.name">C_JASPER</stringProp>
            <stringProp name="Argument.value">performance</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qa, staging, performance, production</stringProp>
          </elementProp>
          <elementProp name="C_KAPTEST" elementType="Argument">
            <stringProp name="Argument.name">C_KAPTEST</stringProp>
            <stringProp name="Argument.value">production</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qa, staging, production</stringProp>
          </elementProp>
          <elementProp name="C_PEARSON" elementType="Argument">
            <stringProp name="Argument.name">C_PEARSON</stringProp>
            <stringProp name="Argument.value">qa</stringProp>
            <stringProp name="Argument.desc">qa, staging, production</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="C_PING" elementType="Argument">
            <stringProp name="Argument.name">C_PING</stringProp>
            <stringProp name="Argument.value">production</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qa, staging, production</stringProp>
          </elementProp>
          <elementProp name="C_PRODUCTCONFIG" elementType="Argument">
            <stringProp name="Argument.name">C_PRODUCTCONFIG</stringProp>
            <stringProp name="Argument.value">qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">productconfig</stringProp>
          </elementProp>
          <elementProp name="C_PROMETRIC" elementType="Argument">
            <stringProp name="Argument.name">C_PROMETRIC</stringProp>
            <stringProp name="Argument.value">qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qa, staging, production</stringProp>
          </elementProp>
          <elementProp name="C_STUDYPLAN" elementType="Argument">
            <stringProp name="Argument.name">C_STUDYPLAN</stringProp>
            <stringProp name="Argument.value">staging</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qa, staging, production</stringProp>
          </elementProp>
          <elementProp name="C_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">C_TOKEN</stringProp>
            <stringProp name="Argument.value">qa-prodkaptest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qa, staging, production</stringProp>
          </elementProp>
          <elementProp name="C_USERPREF" elementType="Argument">
            <stringProp name="Argument.name">C_USERPREF</stringProp>
            <stringProp name="Argument.value">qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qa, staging, production</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Kaptest.com micro site environment setup.
Each site needs to be setup in the Cookie manager
option to change: qa, staging, production or performance.</stringProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="${C_ENV}.channel" elementType="Cookie" testname="${C_ENV}.channel">
            <stringProp name="Cookie.value">${C_CHANNEL}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.formstack" elementType="Cookie" testname="${C_ENV}.formstack">
            <stringProp name="Cookie.value">${C_FORMSTACK}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.jasper" elementType="Cookie" testname="${C_ENV}.jasper">
            <stringProp name="Cookie.value">${C_JASPER}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.kaptest" elementType="Cookie" testname="${C_ENV}.kaptest">
            <stringProp name="Cookie.value">${C_KAPTEST}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.pearson" elementType="Cookie" testname="${C_ENV}.pearson">
            <stringProp name="Cookie.value">${C_PEARSON}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.ping" elementType="Cookie" testname="${C_ENV}.ping">
            <stringProp name="Cookie.value">${C_PING}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.productconfig" elementType="Cookie" testname="${C_ENV}.productconfig">
            <stringProp name="Cookie.value">${C_PRODUCTCONFIG}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.prometric" elementType="Cookie" testname="${C_ENV}.prometric">
            <stringProp name="Cookie.value">${C_PROMETRIC}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.studyPlan" elementType="Cookie" testname="${C_ENV}.studyPlan">
            <stringProp name="Cookie.value">${C_STUDYPLAN}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.userpreferences" elementType="Cookie" testname="${C_ENV}.userpreferences">
            <stringProp name="Cookie.value">${C_USERPREF}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.token" elementType="Cookie" testname="${C_ENV}.token">
            <stringProp name="Cookie.value">${C_TOKEN}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="${C_ENV}.aamc" elementType="Cookie" testname="${C_ENV}.aamc">
            <stringProp name="Cookie.value">${C_AAMC}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.channel" elementType="Cookie" testname="${C_ENV}.channel">
            <stringProp name="Cookie.value">${C_CHANNEL}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.formstack" elementType="Cookie" testname="${C_ENV}.formstack">
            <stringProp name="Cookie.value">${C_FORMSTACK}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.jasper" elementType="Cookie" testname="${C_ENV}.jasper">
            <stringProp name="Cookie.value">${C_JASPER}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.kaptest" elementType="Cookie" testname="${C_ENV}.kaptest">
            <stringProp name="Cookie.value">${C_KAPTEST}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.pearson" elementType="Cookie" testname="${C_ENV}.pearson">
            <stringProp name="Cookie.value">${C_PEARSON}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.ping" elementType="Cookie" testname="${C_ENV}.ping">
            <stringProp name="Cookie.value">${C_PING}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.productconfig" elementType="Cookie" testname="${C_ENV}.productconfig">
            <stringProp name="Cookie.value">${C_PRODUCTCONFIG}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.prometric" elementType="Cookie" testname="${C_ENV}.prometric">
            <stringProp name="Cookie.value">${C_PROMETRIC}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.studyPlan" elementType="Cookie" testname="${C_ENV}.studyPlan">
            <stringProp name="Cookie.value">${C_STUDYPLAN}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.userpreferences" elementType="Cookie" testname="${C_ENV}.userpreferences">
            <stringProp name="Cookie.value">${C_USERPREF}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="${C_ENV}.token" elementType="Cookie" testname="${C_ENV}.token">
            <stringProp name="Cookie.value">${C_TOKEN}</stringProp>
            <stringProp name="Cookie.domain">${PERF-URL}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout">${ConnTimeOut}</stringProp>
        <stringProp name="HTTPSampler.response_timeout">${RespTimeOut}</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Responses" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="bzm - Concurrency Thread Group" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">1</stringProp>
        <stringProp name="RampUp">1</stringProp>
        <stringProp name="Steps">10</stringProp>
        <stringProp name="Hold">3</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1. /login/atom" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">login/atom</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re">${Exclusion}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0(Macintosh;IntelMacOSX10_11_6)AppleWebKit/537.36(KHTML,likeGecko)Chrome/55.0.2883.95Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch,br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
            <stringProp name="RandomTimer.range">${LongWait}</stringProp>
            <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.1 /login/kec?redirectUrl=/login/atom" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="DomainPassword" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">DomainPassword</stringProp>
                <stringProp name="Argument.value">${Password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="DomainUserName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">DomainUserName</stringProp>
                <stringProp name="Argument.value">${Username}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="redirectUrl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">/login/atom</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">redirectUrl</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">login/kec?redirectUrl=/login/atom</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re">${Exclusion}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://${PERF-URL}</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0(Macintosh;IntelMacOSX10_11_6)AppleWebKit/537.36(KHTML,likeGecko)Chrome/55.0.2883.95Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${PERF-URL}/login/kec?redirectUrl=/login/atom</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
            <stringProp name="RandomTimer.range">${LongWait}</stringProp>
            <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Date" elementType="Argument">
                <stringProp name="Argument.name">Date</stringProp>
                <stringProp name="Argument.value">${__time(MM/dd/yyyy hh:mm:ss a,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TestName" elementType="Argument">
                <stringProp name="Argument.name">TestName</stringProp>
                <stringProp name="Argument.value">Perf_${TestSeq}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Token" enabled="true">
            <stringProp name="TestPlan.comments">file path: /home/jamesk/jmeter31/bin/kaplan/Harmony-strand-id.csv </stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="filename">${Token_File}</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.2 /login/atom" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ProductCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ProductCode</stringProp>
                  <stringProp name="Argument.value">${ProductCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ProductConfigurationProgramCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ProductConfigurationProgramCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ProductConfigurationProductCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ProductConfigurationProductCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="CourseAccessId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CourseAccessId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ExternalUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ExternalUserId</stringProp>
                  <stringProp name="Argument.value">${EnrollmentId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="EnrollmentId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">EnrollmentId</stringProp>
                  <stringProp name="Argument.value">${EnrollmentId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="StudentId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${EnrollmentId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">StudentId</stringProp>
                </elementProp>
                <elementProp name="EnrollmentStartDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">EnrollmentStartDate</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ClassCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ClassCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ClassStartDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ClassStartDate</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="EventCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">EventCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="EventType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">EventType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="EventStartDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">EventStartDate</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IsEventLiveOnline" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IsEventLiveOnline</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/login/atom</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}/login/atom</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.1 /testui" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/testui</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}/login/atom</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.2 /testui/home" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/testui/home</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}/login/atom</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.3 /studentreporting/api/assessmentconfig" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/studentreporting/api/assessmentconfig</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.4 /h/configuration/assessment/QATESTOD" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/configuration/assessment/QATESTOD</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.5 /h/productconfig/KTP/GRAD/OAT/QATESTOD Get" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/productconfig/KTP/GRAD/OAT/${ProductCode}?courseAccessId=${EnrollmentId}&amp;classCode=${EnrollmentId}&amp;enrollmentId=${EnrollmentId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.6 ${student_perf_path}enrollment/{EnrollmentId}/sequence?status=in_progress&amp;limit=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${student_perf_path}enrollment/${EnrollmentId}/sequence?status=in_progress&amp;limit=1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">/h/studentperformance/enrollment/10000/sequence?status=in_progress&amp;limit=1</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.7 ${student_perf_path}enrollment/{EnrollmentId}/performance/yield_scales" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${student_perf_path}enrollment/${EnrollmentId}/performance/yield_scales</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">/h/studentperformance/enrollment/10000/sequence?status=in_progress&amp;limit=1</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.8 ${student_perf_path}enrollment/{EnrollmentId}/sequence?status=completed&amp;limit=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${student_perf_path}enrollment/${EnrollmentId}/sequence?status=completed&amp;limit=1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">/h/studentperformance/enrollment/10000/sequence?status=in_progress&amp;limit=1</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TestContextId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">Sid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.system == &apos;content&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_Qid</stringProp>
              <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TestContextId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TestContextId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_SequenceId</stringProp>
              <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.9 ${student_perf_path}enrollment/{EnrollmentId}/sequence?status=pending_review&amp;limit=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${student_perf_path}enrollment/${EnrollmentId}/sequence?status=pending_review&amp;limit=1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">/h/studentperformance/enrollment/10000/sequence?status=in_progress&amp;limit=1</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.5 /h/harmony-integration/tagstats-OLD" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;enrollment_id&quot;: &quot;${EnrollmentId}&quot;,&#xd;
  &quot;pool_tag_name&quot;: &quot;sn_4d45f&quot;,&#xd;
  &quot;strand_tag_names&quot;: [&#xd;
    &quot;behavioral_sciences&quot;,&#xd;
    &quot;biochemistry&quot;,&#xd;
    &quot;biology&quot;,&#xd;
    &quot;general_chemistry&quot;,&#xd;
    &quot;organic_chemistry&quot;,&#xd;
    &quot;physics&quot;,&#xd;
    &quot;cars&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/harmony-integration/tagstats</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">atom-api-key</stringProp>
                  <stringProp name="Header.value">atomqateam</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.1 /testui/create/stepone" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/testui/create/stepone</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.2 /h/productconfig/KTP/GRAD/OAT/QATESTOD Options" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/productconfig/KTP/GRAD/MCAT/${ProductCode}?courseAccessId=${EnrollmentId}&amp;classCode=${EnrollmentId}</stringProp>
            <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.3 /h/productconfig/KTP/GRAD/OAT/QATESTOD Get" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/productconfig/KTP/GRAD/OAT/${ProductCode}?courseAccessId=${EnrollmentId}&amp;classCode=${EnrollmentId}&amp;enrollmentId=${EnrollmentId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.4 /h/configuration/assessment/QATESTOD" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/configuration/assessment/QATESTOD</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.5 ${harmony_path}tagstats" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;enrollment_id&quot;:&quot;${EnrollmentId}&quot;,&quot;pool_tag_name&quot;:&quot;sn_4d45f&quot;,&quot;strand_tag_names&quot;:[&quot;behavioral_sciences&quot;,&quot;biochemistry&quot;,&quot;biology&quot;,&quot;general_chemistry&quot;,&quot;organic_chemistry&quot;,&quot;physics&quot;,&quot;cars&quot;],&quot;fieldtest&quot;:{&quot;exclude_raw_counts&quot;:true,&quot;difficulty_names&quot;:[&quot;Experimental&quot;]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${harmony_path}tagstats</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">atom-api-key</stringProp>
                  <stringProp name="Header.value">atomqateam</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.6 ${harmony_path}sequence Options" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${harmony_path}sequence</stringProp>
            <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.7 /h/harmony-integration/sequence Create-1108-bk" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;title&quot;: &quot;${Title}-${EnrollmentId}-${__time(MM/dd/yyyy hh:mm:ss,)}&quot;,&#xd;
  &quot;product_code&quot;: &quot;QATESTOD&quot;,&#xd;
  &quot;program_code&quot;: &quot;OAT&quot;,&#xd;
  &quot;business&quot;: &quot;KTP&quot;,&#xd;
  &quot;product_line&quot;: &quot;GRAD&quot;,&#xd;
  &quot;enrollment_id&quot;: &quot;${EnrollmentId}&quot;,&#xd;
  &quot;assessment_recipe&quot;: {&#xd;
    &quot;ability_estimator&quot;: &quot;MLE&quot;,&#xd;
    &quot;item_pool_name&quot;: &quot;sn_4d45f&quot;,&#xd;
    &quot;initial_ability&quot;: {&#xd;
      &quot;theta&quot;: 0&#xd;
    },&#xd;
    &quot;min_theta&quot;: -5,&#xd;
    &quot;max_theta&quot;: 5,&#xd;
    &quot;num_points&quot;: 51,&#xd;
    &quot;eap_mean&quot;: 0,&#xd;
    &quot;eap_variance&quot;: 1.0,&#xd;
    &quot;yield_mean&quot;: 0,&#xd;
    &quot;yield_variance&quot;: 1,&#xd;
    &quot;strands&quot;: [&#xd;
      {&#xd;
        &quot;name&quot;: &quot;behavioral_sciences&quot;,&#xd;
        &quot;title&quot;: &quot;Behavioral Sciences&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.2565&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;psych_soc&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;physics&quot;,&#xd;
        &quot;title&quot;: &quot;Physics&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.0652&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;psych_soc&quot;,&#xd;
          &quot;chem_phys&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;biochemistry&quot;,&#xd;
        &quot;title&quot;: &quot;Biochemistry&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.2152&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;bio_biochem&quot;,&#xd;
          &quot;chem_phys&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;biology&quot;,&#xd;
        &quot;title&quot;: &quot;Biology&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.1152&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;bio_biochem&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;general_chemistry&quot;,&#xd;
        &quot;title&quot;: &quot;General Chemistry&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.087&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;chem_phys&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;organic_chemistry&quot;,&#xd;
        &quot;title&quot;: &quot;Organic Chemistry&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.0304&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;chem_phys&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;cars&quot;,&#xd;
        &quot;title&quot;: &quot;CARS&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.2304&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;cars&quot;&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;sections&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;qbank&quot;,&#xd;
      &quot;selection_recipe&quot;: {&#xd;
        &quot;item_pool_name&quot;: &quot;sn_4d45f&quot;,&#xd;
        &quot;strands&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;behavioral_sciences&quot;,&#xd;
            &quot;title&quot;: &quot;Behavioral Sciences&quot;,&#xd;
            &quot;type&quot;: &quot;strand&quot;,&#xd;
            &quot;yield_scale&quot;: {&#xd;
              &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
              &quot;coefficient&quot;: 0.2565&#xd;
            },&#xd;
            &quot;recency_threshold&quot;: 200,&#xd;
            &quot;display_threshold&quot;: 5,&#xd;
            &quot;difficulty_levels&quot;: [&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Easy&quot;&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
                &quot;min&quot;: -0.2867029&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Hard&quot;,&#xd;
                &quot;min&quot;: 1.0462760&#xd;
              }&#xd;
            ],&#xd;
            &quot;sections&quot;: [&#xd;
              &quot;psych_soc&quot;&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;biochemistry&quot;,&#xd;
            &quot;title&quot;: &quot;Biochemistry&quot;,&#xd;
            &quot;type&quot;: &quot;strand&quot;,&#xd;
            &quot;yield_scale&quot;: {&#xd;
              &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
              &quot;coefficient&quot;: 0.2152&#xd;
            },&#xd;
            &quot;recency_threshold&quot;: 200,&#xd;
            &quot;display_threshold&quot;: 5,&#xd;
            &quot;difficulty_levels&quot;: [&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Easy&quot;&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
                &quot;min&quot;: -0.2867029&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Hard&quot;,&#xd;
                &quot;min&quot;: 1.0462760&#xd;
              }&#xd;
            ],&#xd;
            &quot;sections&quot;: [&#xd;
              &quot;bio_biochem&quot;,&#xd;
              &quot;chem_phys&quot;&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;organic_chemistry&quot;,&#xd;
            &quot;title&quot;: &quot;Organic Chemistry&quot;,&#xd;
            &quot;type&quot;: &quot;strand&quot;,&#xd;
            &quot;yield_scale&quot;: {&#xd;
              &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
              &quot;coefficient&quot;: 0.0304&#xd;
            },&#xd;
            &quot;recency_threshold&quot;: 200,&#xd;
            &quot;display_threshold&quot;: 5,&#xd;
            &quot;difficulty_levels&quot;: [&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Easy&quot;&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
                &quot;min&quot;: -0.2867029&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Hard&quot;,&#xd;
                &quot;min&quot;: 1.0462760&#xd;
              }&#xd;
            ],&#xd;
            &quot;sections&quot;: [&#xd;
              &quot;chem_phys&quot;&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;physics&quot;,&#xd;
            &quot;title&quot;: &quot;Physics&quot;,&#xd;
            &quot;type&quot;: &quot;strand&quot;,&#xd;
            &quot;yield_scale&quot;: {&#xd;
              &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
              &quot;coefficient&quot;: 0.0652&#xd;
            },&#xd;
            &quot;recency_threshold&quot;: 200,&#xd;
            &quot;display_threshold&quot;: 5,&#xd;
            &quot;difficulty_levels&quot;: [&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Easy&quot;&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
                &quot;min&quot;: -0.2867029&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Hard&quot;,&#xd;
                &quot;min&quot;: 1.0462760&#xd;
              }&#xd;
            ],&#xd;
            &quot;sections&quot;: [&#xd;
              &quot;psych_soc&quot;,&#xd;
              &quot;chem_phys&quot;&#xd;
            ]&#xd;
          }&#xd;
        ],&#xd;
        &quot;item_sources&quot;: [&#xd;
          {&#xd;
            &quot;source_type&quot;: &quot;Unseen&quot;,&#xd;
            &quot;item_selection_rule&quot;: &quot;Adaptive&quot;,&#xd;
            &quot;item_exposure_candidates_count&quot;: 5,&#xd;
            &quot;item_exposure_candidates_blocking&quot;: true&#xd;
          }&#xd;
          &#xd;
        ],&#xd;
        &quot;min_questions&quot;: 10,&#xd;
        &quot;max_questions&quot;: 13&#xd;
      }&#xd;
    }&#xd;
  ],&#xd;
  &quot;sequence_type&quot;: &quot;test.quiz&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${harmony_path}sequence</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">atom-api-key</stringProp>
                  <stringProp name="Header.value">atomqateam</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TitleResult" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TitleResult</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;title&quot;: &quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">***** TitleResult NOT FOUND *****</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TitleResult" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TitleResult</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.product_code == &quot;QATESTOD&quot;)].title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_SectionId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="SectionId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SectionId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.selection_recipe)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_SectionId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="sequenceId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">sequenceId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.sections)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_SequenceId</stringProp>
              <stringProp name="TestPlan.comments">selection_recipe</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TestContextIcd" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TestContextId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.sections)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_TestContextId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.7 ${harmony_path}sequence Create" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;title&quot;: &quot;${Title}-${EnrollmentId}-${__time(MM/dd/yyyy hh:mm:ss,)}&quot;,&#xd;
  &quot;product_code&quot;: &quot;QATESTOD&quot;,&#xd;
  &quot;program_code&quot;: &quot;OAT&quot;,&#xd;
  &quot;business&quot;: &quot;KTP&quot;,&#xd;
  &quot;product_line&quot;: &quot;GRAD&quot;,&#xd;
  &quot;enrollment_id&quot;: &quot;${EnrollmentId}&quot;,&#xd;
  &quot;assessment_recipe&quot;: {&#xd;
    &quot;ability_estimator&quot;: &quot;MLE&quot;,&#xd;
    &quot;item_pool_name&quot;: &quot;sn_4d45f&quot;,&#xd;
    &quot;initial_ability&quot;: {&#xd;
      &quot;theta&quot;: 0&#xd;
    },&#xd;
&#xd;
    &quot;min_theta&quot;: -5,&#xd;
    &quot;max_theta&quot;: 5,&#xd;
    &quot;num_points&quot;: 51,&#xd;
    &quot;eap_mean&quot;: 0,&#xd;
    &quot;eap_variance&quot;: 1.0,&#xd;
    &quot;yield_mean&quot;: 0,&#xd;
    &quot;yield_variance&quot;: 1,&#xd;
    &quot;fieldtest_difficulty_name&quot;: &quot;Experimental&quot;,&#xd;
    &quot;fieldtest&quot;: {&#xd;
			&quot;exclude_raw_counts&quot;: true,&#xd;
			&quot;difficulty_names&quot;: [&quot;Experimental&quot;]&#xd;
	},&#xd;
    &quot;strands&quot;: [&#xd;
      {&#xd;
        &quot;name&quot;: &quot;behavioral_sciences&quot;,&#xd;
        &quot;title&quot;: &quot;Behavioral Sciences&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.2565&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&quot;psych_soc&quot;], &#xd;
        &quot;length&quot;: 200&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;physics&quot;,&#xd;
        &quot;title&quot;: &quot;Physics&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.0652&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;psych_soc&quot;,&#xd;
          &quot;chem_phys&quot;],&#xd;
          &quot;length&quot;: 200&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;biochemistry&quot;,&#xd;
        &quot;title&quot;: &quot;Biochemistry&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.2152&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;bio_biochem&quot;,&#xd;
          &quot;chem_phys&quot;],&#xd;
          &quot;length&quot;: 200&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;biology&quot;,&#xd;
        &quot;title&quot;: &quot;Biology&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.1152&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;bio_biochem&quot;],&#xd;
          &quot;length&quot;: 200&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;general_chemistry&quot;,&#xd;
        &quot;title&quot;: &quot;General Chemistry&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.087&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;chem_phys&quot;],&#xd;
          &quot;length&quot;: 200&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;organic_chemistry&quot;,&#xd;
        &quot;title&quot;: &quot;Organic Chemistry&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.0304&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;chem_phys&quot;],&#xd;
          &quot;length&quot;: 200&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;cars&quot;,&#xd;
        &quot;title&quot;: &quot;CARS&quot;,&#xd;
        &quot;type&quot;: &quot;strand&quot;,&#xd;
        &quot;yield_scale&quot;: {&#xd;
          &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
          &quot;coefficient&quot;: 0.2304&#xd;
        },&#xd;
        &quot;recency_threshold&quot;: 200,&#xd;
        &quot;display_threshold&quot;: 5,&#xd;
        &quot;difficulty_levels&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Easy&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
            &quot;min&quot;: -0.2867029&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;Hard&quot;,&#xd;
            &quot;min&quot;: 1.0462760&#xd;
          }&#xd;
        ],&#xd;
        &quot;sections&quot;: [&#xd;
          &quot;cars&quot;],&#xd;
          &quot;length&quot;: 200&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;sections&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;qbank&quot;,&#xd;
      &quot;selection_recipe&quot;: {&#xd;
        &quot;item_pool_name&quot;: &quot;sn_4d45f&quot;,&#xd;
        &quot;strands&quot;: [&#xd;
          {&#xd;
            &quot;name&quot;: &quot;behavioral_sciences&quot;,&#xd;
            &quot;title&quot;: &quot;Behavioral Sciences&quot;,&#xd;
            &quot;type&quot;: &quot;strand&quot;,&#xd;
            &quot;yield_scale&quot;: {&#xd;
              &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
              &quot;coefficient&quot;: 0.2565&#xd;
            },&#xd;
            &quot;recency_threshold&quot;: 200,&#xd;
            &quot;display_threshold&quot;: 5,&#xd;
            &quot;difficulty_levels&quot;: [&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Easy&quot;&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
                &quot;min&quot;: -0.2867029&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Hard&quot;,&#xd;
                &quot;min&quot;: 1.0462760&#xd;
              }&#xd;
            ],&#xd;
            &quot;sections&quot;: [&#xd;
              &quot;psych_soc&quot;],&#xd;
            &quot;length&quot;: 200&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;biochemistry&quot;,&#xd;
            &quot;title&quot;: &quot;Biochemistry&quot;,&#xd;
            &quot;type&quot;: &quot;strand&quot;,&#xd;
            &quot;yield_scale&quot;: {&#xd;
              &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
              &quot;coefficient&quot;: 0.2152&#xd;
            },&#xd;
            &quot;recency_threshold&quot;: 200,&#xd;
            &quot;display_threshold&quot;: 5,&#xd;
            &quot;difficulty_levels&quot;: [&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Easy&quot;&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
                &quot;min&quot;: -0.2867029&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Hard&quot;,&#xd;
                &quot;min&quot;: 1.0462760&#xd;
              }&#xd;
            ],&#xd;
            &quot;sections&quot;: [&#xd;
              &quot;bio_biochem&quot;,&#xd;
              &quot;chem_phys&quot;],&#xd;
            &quot;length&quot;: 200&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;organic_chemistry&quot;,&#xd;
            &quot;title&quot;: &quot;Organic Chemistry&quot;,&#xd;
            &quot;type&quot;: &quot;strand&quot;,&#xd;
            &quot;yield_scale&quot;: {&#xd;
              &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
              &quot;coefficient&quot;: 0.0304&#xd;
            },&#xd;
            &quot;recency_threshold&quot;: 200,&#xd;
            &quot;display_threshold&quot;: 5,&#xd;
            &quot;difficulty_levels&quot;: [&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Easy&quot;&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
                &quot;min&quot;: -0.2867029&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Hard&quot;,&#xd;
                &quot;min&quot;: 1.0462760&#xd;
              }&#xd;
            ],&#xd;
            &quot;sections&quot;: [&#xd;
              &quot;chem_phys&quot;],&#xd;
              &quot;length&quot;: 200&#xd;
          },&#xd;
          {&#xd;
            &quot;name&quot;: &quot;physics&quot;,&#xd;
            &quot;title&quot;: &quot;Physics&quot;,&#xd;
            &quot;type&quot;: &quot;strand&quot;,&#xd;
            &quot;yield_scale&quot;: {&#xd;
              &quot;name&quot;: &quot;mcat-2017&quot;,&#xd;
              &quot;coefficient&quot;: 0.0652&#xd;
            },&#xd;
            &quot;recency_threshold&quot;: 200,&#xd;
            &quot;display_threshold&quot;: 5,&#xd;
            &quot;difficulty_levels&quot;: [&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Easy&quot;&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Intermediate&quot;,&#xd;
                &quot;min&quot;: -0.2867029&#xd;
              },&#xd;
              {&#xd;
                &quot;name&quot;: &quot;Hard&quot;,&#xd;
                &quot;min&quot;: 1.0462760&#xd;
              }&#xd;
            ],&#xd;
            &quot;sections&quot;: [&#xd;
              &quot;psych_soc&quot;,&#xd;
              &quot;chem_phys&quot;],&#xd;
              &quot;length&quot;: 200&#xd;
          }&#xd;
        ],&#xd;
        &quot;item_sources&quot;: [&#xd;
          {&#xd;
		    &quot;source_type&quot;: &quot;FieldTest&quot;,&#xd;
		    &quot;weight&quot;: 0.1,&#xd;
		    &quot;item_selection_rule&quot;: &quot;Random&quot;&#xd;
			},&#xd;
          {&#xd;
            &quot;source_type&quot;: &quot;Unseen&quot;,&#xd;
            &quot;item_selection_rule&quot;: &quot;Adaptive&quot;,&#xd;
            &quot;item_exposure_candidates_count&quot;: 5,&#xd;
            &quot;item_exposure_candidates_blocking&quot;: true&#xd;
          },&#xd;
          {&#xd;
		  &quot;source_type&quot;: &quot;FieldTest&quot;,&#xd;
		  &quot;weight&quot;: 0.1,&#xd;
		   &quot;item_selection_rule&quot;: &quot;Random&quot;&#xd;
		}&#xd;
        ],&#xd;
        &quot;min_questions&quot;: 10,&#xd;
        &quot;max_questions&quot;: 13&#xd;
      }&#xd;
    }&#xd;
  ],&#xd;
  &quot;sequence_type&quot;: &quot;test.quiz&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${harmony_path}sequence</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">atom-api-key</stringProp>
                  <stringProp name="Header.value">atomqateam</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${VideoWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${VideoWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TitleResult" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TitleResult</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;title&quot;: &quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">***** TitleResult NOT FOUND *****</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TitleResult" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TitleResult</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.product_code == &quot;QATESTOD&quot;)].title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_SectionId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="SectionId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SectionId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.selection_recipe)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_SectionId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="sequenceId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">sequenceId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.sections)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_SequenceId</stringProp>
              <stringProp name="TestPlan.comments">selection_recipe</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TestContextIcd" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TestContextId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.sections)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_TestContextId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-757289729">${TitleResult}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="TestPlan.comments">Student will take a test from 5 to 20 questions</stringProp>
            <stringProp name="LoopController.loops">${TestCount}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="QuestionSeq" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">QuestionSeq</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.1 /testui/simple/exam/{TestContextId}/{SectionId}/" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
              <stringProp name="HTTPSampler.port">${Var_Port_No}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Var_Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/testui/simple/exam/${TestContextId}/${SectionId}/${QuestionSeq}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">https://integration-atom.qa.ktp.io/testui/simple/exam/cc58f952-6b72-41c6-8e0a-8947d8e0ab42/91fca475-d768-4270-b136-16e7eac19ee9/1
TestContextId is same as sequenceId
${Var_Api_Base_String}sequence/${TestContextId}/section/${SectionId}/contents
/h/harmony/sequence/${TestContextId}/section/${SectionId}/contents</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${LongWait}</stringProp>
                <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - new" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">atom-api-key</stringProp>
                    <stringProp name="Header.value">atomqateam</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Qid" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Qid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.system == &apos;content&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_Qid</stringProp>
                <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="QuestionIds" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">QuestionIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..items..id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_QuestionIds</stringProp>
                <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="itemId" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">itemId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.system ==&quot;content&quot;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_Qid</stringProp>
                <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="itemId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">itemId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.system ==&quot;content&quot;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_Qid</stringProp>
                <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="contentUri" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">TestUri</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..contentUri</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_contentUri</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="QuestionId" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">QuestionId</stringProp>
                <stringProp name="RegexExtractor.regex">content/(.+?)/processed.json</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NO_QuestionId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CheckContentItem" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CItem</stringProp>
                <stringProp name="RegexExtractor.regex">path&quot;:&quot;/api/v1/item/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NO_Citem</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String CheckItem = vars.get(&quot;itemId_matchNr&quot;);

if (CheckItem == &quot;1&quot;) {
	vars.put(&quot;Multi&quot;, &quot;0&quot;);
	
} else {
	vars.put(&quot;Multi&quot;, &quot;1&quot;);
	
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.1-1 {harmony_path}sequence/{TestContextId}/section/{SectionId}/contents" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
              <stringProp name="HTTPSampler.port">${Var_Port_No}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Var_Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${harmony_path}sequence/${TestContextId}/section/${SectionId}/contents</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
                <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - new" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">atom-api-key</stringProp>
                    <stringProp name="Header.value">atomqateam</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Qid" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Qid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.system == &apos;content&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_Qid</stringProp>
                <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="QuestionIds" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">QuestionIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..items..id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_QuestionIds</stringProp>
                <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="itemId" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">itemId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.system ==&quot;content&quot;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_Qid</stringProp>
                <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="itemId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">itemId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.system ==&quot;content&quot;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_Qid</stringProp>
                <stringProp name="TestPlan.comments">one or more Questionid</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="contentUri" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">TestUri</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..contentUri</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_contentUri</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="QuestionId" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">QuestionId</stringProp>
                <stringProp name="RegexExtractor.regex">content/(.+?)/processed.json</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NO_QuestionId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CheckContentItem" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CItem</stringProp>
                <stringProp name="RegexExtractor.regex">path&quot;:&quot;/api/v1/item/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NO_Citem</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String CheckItem = vars.get(&quot;itemId_matchNr&quot;);

if (CheckItem == &quot;1&quot;) {
	vars.put(&quot;Multi&quot;, &quot;0&quot;);
	
} else {
	vars.put(&quot;Multi&quot;, &quot;1&quot;);
	
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="false">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Qid: ${Qid},
itemId: ${itemId}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.2 Get an  answer ID from content" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
              <stringProp name="HTTPSampler.port">${Var_Port_No}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Var_Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${content_path}items/${itemId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Create a new test through harmony api</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
                <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - new" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">atom-api-key</stringProp>
                    <stringProp name="Header.value">atomqateam</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/octet-stream</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="GetNumQuestions" enabled="true">
                <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">GetNumQuestions</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..items..[?(@.kaplan_type==&apos;question&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_GetNumQuestions</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AnswerId1" enabled="true">
                <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">AnswerId1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..items..simple_choices..id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_AnswerId1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.3 Answer a Question" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;answers&quot;: [&quot;${AnswerId1_1}&quot;],&#xd;
  &quot;is_omitted&quot;: false,&#xd;
  &quot;is_submitted&quot;: true,&#xd;
  &quot;time_spent&quot;: 20000&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
              <stringProp name="HTTPSampler.port">${Var_Port_No}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Var_Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${harmony_path}sequence/${TestContextId}/section/${SectionId}/content/${Qid}/item/${GetNumQuestions}/interaction</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Create a new test through harmony api
Updated the end point format 7/15

${Var_Api_Base_String}test/${TestContextId}/section/${SectionId}/item/${QuestionId}/question/${QuestionId1}/interaction
https://harmony.qa.ktp.io/api/v1/sequence//section//content/ba000000-0005-0000-0000-000000001198/item/ba000000-0005-0001-0000-000000001198/interaction
</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${AnswerWait}</stringProp>
                <stringProp name="ConstantTimer.delay">${AnswerWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">atom-api-key</stringProp>
                    <stringProp name="Header.value">atomqateam</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for single answer" enabled="false">
              <stringProp name="TestPlan.comments">If the question is passage</stringProp>
              <stringProp name="IfController.condition">&quot;${Multi}&quot; == &quot;0&quot; </stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for multi Questions" enabled="false">
              <stringProp name="TestPlan.comments">If the question is not the pasage, single question</stringProp>
              <stringProp name="IfController.condition">&quot;${Multi}&quot;  == &quot;1&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6. Get a Multi answer ID from S3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">atom-content-api-us-east-1-526930246559.s3.amazonaws.com</stringProp>
                <stringProp name="HTTPSampler.port">${Var_Port_No}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Var_Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/content/${Qid}/content.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Create a new test through harmony api

updated url:https://atom-content-api-us-east-1-526930246559.s3.amazonaws.com/content/ba000000-0005-0000-0000-000000001198/content.json</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="GetNumQuestions" enabled="true">
                  <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">GetNumQuestions</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..items..[?(@.kaplan_type==&apos;question&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_GetNumQuestions</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="GetNumQuestions" enabled="false">
                  <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">GetNumQuestions</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..items..[?(@.kaplan_type==&apos;question&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_GetNumQuestions</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="GetQuestionId1" enabled="false">
                  <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">QuestionId1</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.content-item-name==&apos;${CItem}.01&apos;)].uuid</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_QuestionId1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AnswerId1" enabled="true">
                  <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">AnswerId1</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..items..simple_choices..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_AnswerId1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AnswerIds" enabled="false">
                  <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">AnswerId1</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..items..simple_choices.*</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_AnswerIds</stringProp>
                  <stringProp name="Scope.variable">AnswerIds</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AnswerId" enabled="false">
                  <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">AnswerId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..items..simple_choices..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_AnswerId</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="GetQuestionId2" enabled="false">
                  <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">QuestionId2</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.content-item-name==&apos;${CItem}.02&apos;)].uuid</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_QuestionId2</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="GetAnswerId2" enabled="false">
                  <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">AnswerId2</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.content-item-name==&apos;${CItem}.02-choice-${Qseq}&apos;)].uuid</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_AnswerId2</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">String QuestionId = vars.get(&quot;GetNumQuestions_matchNr&quot;);

if (NumOfQuestion == &quot;1&quot;) {
	vars.put(&quot;Multi&quot;, &quot;1&quot;);
} else {
	vars.put(&quot;Multi&quot;, &quot;0&quot;);
}
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetContentItemName" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ContentItemName</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;content-item-name&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NO_ContentItemName</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="GetContentItemName" enabled="false">
                  <stringProp name="TestPlan.comments">
$..[?(@.correct==true)].uuid
</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">ContentItemName</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.content==&apos;&lt;p xmlns=\&quot;http://www.w3.org/1999/xhtml\&quot;&gt;Answer choice ${Qseq}&lt;/p&gt;&apos;)].uuid</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_AnswerId</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor2" enabled="false">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - new" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">atom-api-key</stringProp>
                      <stringProp name="Header.value">atomqateam</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/octet-stream</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Multi-Question" enabled="false">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Write AnswerId1: ${AnswerId1}
AnswerId1: ${AnswerId1_0]},
AnswerId2: ${AnswerId1_1},
AnswerId3: ${AnswerId1_2},
AnswerId4: ${AnswerId1_3},</stringProp>
                <stringProp name="RESPONSE_DATA">AnswerId1: ${AnswerId1_1},
AnswerId2: ${AnswerId1_2},
AnswerId3: ${AnswerId1_3},
AnswerId4: ${AnswerId1_4},
AnswerId5: ${AnswerId1_5},
AnswerId6: ${AnswerId1_6},
AnswerId7: ${AnswerId1_7},
AnswerId8: ${AnswerId1_8},
AnswerId9: ${AnswerId1_9},</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${itemId_matchNr}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter1" enabled="true">
                  <stringProp name="CounterConfig.start">2</stringProp>
                  <stringProp name="CounterConfig.end">30</stringProp>
                  <stringProp name="CounterConfig.incr">4</stringProp>
                  <stringProp name="CounterConfig.name">CO</stringProp>
                  <stringProp name="CounterConfig.format">0</stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter2" enabled="true">
                  <stringProp name="CounterConfig.start">0</stringProp>
                  <stringProp name="CounterConfig.end">5</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">CO2</stringProp>
                  <stringProp name="CounterConfig.format">0</stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7. Answer a Multi Question" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;answers&quot;: [&quot;${AnswerId1_1}&quot;],&#xd;
  &quot;is_marked&quot;: false,&#xd;
  &quot;is_submitted&quot;: true,&#xd;
  &quot;time_spent&quot;: 50&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Var_Server_Name}</stringProp>
                  <stringProp name="HTTPSampler.port">${Var_Port_No}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${Var_Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${Var_Api_Base_String}sequence/${TestContextId}/section/${SectionId}/content/${Qid}/item/${GetNumQuestions}/interaction</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Create a new test through harmony api
Updated the end point format 7/15

${Var_Api_Base_String}test/${TestContextId}/section/${SectionId}/item/${QuestionId}/question/${QuestionId1}/interaction
https://harmony.qa.ktp.io/api/v1/sequence//section//content/ba000000-0005-0000-0000-000000001198/item/ba000000-0005-0001-0000-000000001198/interaction
</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">atom-api-key</stringProp>
                        <stringProp name="Header.value">atomqateam</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${Token}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-597492296">AnswerId1</stringProp>
                      <stringProp name="255157181">GetNumQuestions_Seq</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-419137827">
                        <stringProp name="-710803660">AnswerId_${CO}</stringProp>
                        <stringProp name="-2031080176">GetNumQuestions_${CO2}</stringProp>
                        <stringProp name="0"></stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">true</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">Integer AnswerId_matchNr = vars.get(&quot;AnswerId1_matchNr&quot;);

for (i = 0; i &lt; AnswerId_matchNr, i++) {

  String AnswerIds_temp = &quot;AnswerId1_&quot;+i+1;
  String AnswerIds_Val = vars.get(AnswerIds_temp);
  vars.put(AnswerIds_temp, AnswerIds_Val);

}
</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Multi-Answer" enabled="false">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Write AnswerId1: ${AnswerId1},
AnswerId2: ${AnswerId1_1},
AnswerId3: ${AnswerId1_2},
AnswerId4: ${AnswerId1_3},
AnswerId4: ${AnswerId1_4},</stringProp>
                  <stringProp name="RESPONSE_DATA">AnswerId1: ${AnswerId1_1},
AnswerId2: ${AnswerId1_2},
AnswerId3: ${AnswerId1_3},
AnswerId4: ${AnswerId1_4},
AnswerId5: ${AnswerId1_5},
AnswerId6: ${AnswerId1_6},
AnswerId7: ${AnswerId1_7},
AnswerId8: ${AnswerId1_8},
AnswerId9: ${AnswerId1_9},</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.4 ${harmony_path}sequence/{TestContextId}/complete Options" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${harmony_path}sequence/${TestContextId}/complete</stringProp>
            <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://atom.${C_FORMSTACK}.ktp.io</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">POST</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.5 ${harmony_path}sequence/{TestContextId}/complete Post" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;op&quot;: &quot;add&quot;,&#xd;
    &quot;path&quot;: &quot;/isComplete&quot;,&#xd;
    &quot;value&quot;: &quot;true&quot;&#xd;
  }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${harmony_path}sequence/${TestContextId}/complete</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${VideoWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${VideoWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}/testui/simple/exam/a55339b7-7603-4ef0-adfc-b4af040412c7/5ca2503e-b6b2-4a5b-8fad-4246de6a3e60/6</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://atom.${C_FORMSTACK}.ktp.io</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.6 ${harmony_path}sequence/{TestContextId}?expanded=true" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">${Var_Port_No}</stringProp>
            <stringProp name="HTTPSampler.protocol">${Var_Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${harmony_path}sequence/${TestContextId}?expanded=true</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${Var_Protocol}://atom.${C_FORMSTACK}.ktp.io</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${AnswerWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${AnswerWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.7 ${harmony_path}sequence/{TestContextId}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="expanded" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">expanded</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">${Var_Port_No}</stringProp>
            <stringProp name="HTTPSampler.protocol">${Var_Protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${harmony_path}sequence/${TestContextId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://atom.qa.ktp.io/testui/review/${TestContextId}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://atom.qa.ktp.io</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${Var_Protocol}://atom.${C_FORMSTACK}.ktp.io</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.1 /quizlist UI" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/quizlist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://atom.qa.ktp.io/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-757289729">${TitleResult}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.2 studentperformance based on enrollmentId" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${STUDENTPERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/enrollment/${EnrollmentId}/sequence?status=completed</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://atom.qa.ktp.io/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-757289729">${TitleResult}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.3 /h/configuration/assessment/QATESTOD" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/configuration/assessment/QATESTOD</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.4 /studentreporting/api/assessmentconfig" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/studentreporting/api/assessmentconfig</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.5 /h/productconfig/KTP/GRAD/OAT/QATESTOD Get" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/productconfig/KTP/GRAD/OAT/${ProductCode}?courseAccessId=${EnrollmentId}&amp;classCode=${EnrollmentId}&amp;enrollmentId=${EnrollmentId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.1 /overall UI" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/overall</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://atom.qa.ktp.io/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.2 /studentreporting/api/studentperformance/overall" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">studentreporting/api/studentperformance/overall?tags=behavioral_sciences,physics,biochemistry,biology,general_chemistry,organic_chemistry,cars</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://atom.qa.ktp.io/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="860598645">tag_name&quot;:&quot;physics&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.3 /Overall based on enrollmentId" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${STUDENTPERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/enrollment/${EnrollmentId}/performance?tags=physics,cars,behavioral_sciences,biochemistry,biology,general_chemistry,organic_chemistry</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://atom.qa.ktp.io/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
                <elementProp name="Content-Encoding" elementType="Header">
                  <stringProp name="Header.name">Content-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="860598645">tag_name&quot;:&quot;physics&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.4 /studentreporting/api/userprofile" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/studentreporting/api/userprofile</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.4 /studentreporting/api/assessmentconfig" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/studentreporting/api/assessmentconfig</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.5 /studentreporting/api/productconfig" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/studentreporting/api/productconfig</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.6 ${student_perf_path}enrollment/{EnrollmentId}/performance/yield_scales" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${student_perf_path}/enrollment/${EnrollmentId}/performance/yield_scales</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">/h/studentperformance/enrollment/10000/sequence?status=in_progress&amp;limit=1</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.7 /h/productconfig/KTP/GRAD/OAT/QATESTOD Get" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/productconfig/KTP/GRAD/OAT/${ProductCode}?courseAccessId=${EnrollmentId}&amp;classCode=${EnrollmentId}&amp;enrollmentId=${EnrollmentId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.8 /h/configuration/assessment/QATESTOD" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/configuration/assessment/QATESTOD</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8.1 /testui/review/{{sequence}}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/testui/review/${TestContextId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${LongWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${LongWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://atom.qa.ktp.io/testui/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8.3 /studentreporting/api/assessmentconfig" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PERF-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/studentreporting/api/assessmentconfig</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8.4 /h/configuration/assessment/QATESTOD" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/configuration/assessment/QATESTOD</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8.5 /h/productconfig/KTP/GRAD/OAT/QATESTOD Get" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${API-URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/h/productconfig/KTP/GRAD/OAT/${ProductCode}?courseAccessId=${EnrollmentId}&amp;classCode=${EnrollmentId}&amp;enrollmentId=${EnrollmentId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="LongWait Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${ShortWait}</stringProp>
              <stringProp name="ConstantTimer.delay">${ShortWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${PERF-URL}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Headers" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Headers</stringProp>
                  <stringProp name="Header.value">authorization,content-type</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Request-Method" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Request-Method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
